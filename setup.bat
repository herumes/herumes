@echo off

setlocal enabledelayedexpansion

:: Get project name and directory

set /p PROJECT_NAME=Enter project name: 

set /p PROJECT_DIR=Enter project directory (or press Enter for current directory): 

if "%PROJECT_DIR%"=="" set PROJECT_DIR=%cd%

:: Create project directory

set PROJECT_PATH=%PROJECT_DIR%\%PROJECT_NAME%

mkdir %PROJECT_PATH%

cd %PROJECT_PATH%

echo Created project directory: %PROJECT_PATH%

:: Create virtual environment

python -m venv venv

if %errorlevel% neq 0 (

    echo Failed to create virtual environment

    exit /b %errorlevel%

)

call venv\Scripts\activate

if %errorlevel% neq 0 (

    echo Failed to activate virtual environment

    exit /b %errorlevel%

)

echo Virtual environment created and activated

:: Install development tools

python -m pip install ruff black mypy isort

if %errorlevel% neq 0 (

    echo Failed to install development tools

    exit /b %errorlevel%

)

echo Development tools installed

:: Create requirements.txt

(

echo ruff

echo black

echo mypy

echo isort

) > requirements.txt

echo Created requirements.txt

:: Create project structure

mkdir %PROJECT_NAME%

mkdir tests

echo Created project structure

:: Create README.md

echo # %PROJECT_NAME% > README.md
echo. >> README.md
echo This is a Python project automatically generated by [herumes](https://github.com/herumes)'s auto python project setup script. >> README.md
echo. >> README.md
echo ## Installation >> README.md
echo. >> README.md
echo 1. Clone the repository. >> README.md
echo 2. Create a virtual environment. >> README.md
echo 3. Install the requirements. >> README.md
echo. >> README.md
echo ## Usage >> README.md
echo. >> README.md
echo Run the main.py file to see the output. >> README.md
echo. >> README.md

:: Create main.py

echo def main(): > %PROJECT_NAME%\main.py

echo     print("Hello, World!") >> %PROJECT_NAME%\main.py

echo. >> %PROJECT_NAME%\main.py

echo. >> %PROJECT_NAME%\main.py

echo if __name__ == "__main__": >> %PROJECT_NAME%\main.py

echo     main() >> %PROJECT_NAME%\main.py

if %errorlevel% neq 0 (

    echo Failed to create main.py

    pause

    exit /b %errorlevel%

)

echo Created main.py

:: Create init.py

type nul > %PROJECT_NAME%\__init__.py

:: Create test_main.py

echo import unittest > tests\test_main.py

echo. >> tests\test_main.py

echo. >> tests\test_main.py

echo class TestMain(unittest.TestCase): >> tests\test_main.py

echo     def test_example(self): >> tests\test_main.py

echo         self.assertTrue(True) >> tests\test_main.py

echo. >> tests\test_main.py

echo. >> tests\test_main.py

echo if name == "__main__": >> tests\test_main.py

echo     unittest.main() >> tests\test_main.py

if %errorlevel% neq 0 (

    echo Failed to create test_main.py

    pause

    exit /b %errorlevel%

)

echo Created test_main.py

:: Create pyproject.toml

(

echo [tool.black]

echo line-length = 88

echo target-version = ['py38']

echo.

echo [tool.isort]

echo profile = "black"

echo.

echo [tool.mypy]

echo strict = true

echo.

echo [tool.ruff]

echo line-length = 88

echo select = ["E", "F", "I"]

) > pyproject.toml

echo Created pyproject.toml

:: Create .gitignore

(

echo venv/

echo pycache/

echo *.pyc

echo .mypy_cache/

echo .ruff_cache/

) > .gitignore

echo Created .gitignore

echo Project setup complete. Activate the virtual environment with:

echo %PROJECT_PATH%\venv\Scripts\activate

pause

endlocal